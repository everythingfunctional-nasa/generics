To: J3                                                     J3/24-164rX
From: generics
Subject: Edits for TEMPLATES: Instantiation
Date: 2024-October-29
References: 24-161, 24-162, 24-163, 24-125r5, 24-126r4, 24-127r4

Introduction:
=============

This is the 4th of 6 papers that provide edits for the approved syntax
for templates.

{ UTI: Prevent circular dependencies in deferred procedure args.
  (A deferred procedure's declaration might reference other deferred
  procedures.) }

Section 1:
==========

* Append the following at the end of clause 15 from paper 24-163.


15.6 Instantiation

15.6.1 The INSTANTIATE statement

An INSTANTIATE statement is a specification statement that identifies
an instance of a template by specifying instantiation arguments that
become associated with the deferred arguments of the named template.

R1524 <template-instantiate-stmt>
         <<is>> INSTANTIATE [::] <template-name> (
                [ <instantiation-arg-spec-list> ] ) [, <rename-list> ]
         <<or>> INSTANTIATE [::] <template-name> (
                [ <instantiation-arg-spec-list> ] ), ONLY : [ <only-list> ]

C1536 (R1524) The <template-name> shall be the name of a template that is
              not a templated procedure.

R1525 <templated-procedure-instantiate-stmt> <<is>>
          INSTANTIATE :: <local-name> => <template-name> (
          [ <instantiation-arg-spec-list> ] )

C1537 (R1525) The <template-name> shall be the name of a templated
              procedure.

R1526 <instantiate-stmt> <<is>> <template-instantiate-stmt>
                         <<or>> <template-procedure-instantiate-stmt>

C1538 (R1526) Within an <instantiate-stmt>, an <instantiation-arg> shall
              not depend on any entity defined within the referenced
              template.

C1539 (R1526) In <instantiate-stmt>, <template-name> shall not be the
              name of any construct in which it appears.

The INSTANTIATE statement without the ONLY option provides access to
all public entities of the referenced template.  The INSTANTIATE
statement with the ONLY option provides access only to those entities
that appear as <generic-specs>, <use-names>, or
<use-defined-operators> in the only list.

An accessible entity of the referenced instantiation is associated
with one or more accessed entities, each with its own identifier.
These identifiers are

   - the identifier of the entity in the referenced template if that
     identifier appears as an <only-use-name> or as the
     <defined-operator> of a <generic-spec> in any <only> for that
     instantiation,
   - each of the <local-names> or <local-defined-operators> that the
     entity is given in any <rename> for that instantiation, and

   - the identifier of the entity in that referenced template if
     that identifier does not appear as a <use-name> or
     <use-defined-operator> in any <rename> for that instantiation.


15.6.2 Inline instantiation of templated procedures

A templated procedure can be instantiated and referenced in
an expression or the <procedure-designator> in a <call-stmt>.

R1527 <inline-instantiate> <<is>>
    <template-name> ^ ( <instantiation-arg-spec-list> )

C1540 (R1527) The <template-name> shall be the name of a templated
              procedure.

C1541 (R1527) In <inline-instantiate>, <template-name> shall not be the
              name of any construct in which it appears.

The procedure designated by <inline-instantiate> is the procedure
produced from instantiating the templated procedure.

NOTE

    Templated procedures cannot reference themselves.


15.6.3 Interpretation of template instantiation

Multiple instantiations of a given template with the same actual
instantiation arguments identify the same instance of the referenced
template.

NOTE 1

    As a consequence, if a template defines a derived type, two
    identical instantiations of that template define the same type.
    This provides a mechanism for derived types from templates to be
    compatible across scoping units in a convenient manner. For
    example:

        TEMPLATE TMPL(T)
           DEFERRED TYPE :: T
           TYPE :: list_t
              TYPE(T), ALLOCATABLE :: elements(:)
           END TYPE
        END TEMPLATE

        ...

        SUBROUTINE SUB(list)
           INSTANTIATE TMPL(integer)
           TYPE(list_t) :: list
        END SUBROUTINE

        SUBROUTINE DRIVER()
           INSTANTIATE TMPL(integer)
           TYPE(list_t) :: list ! list_t is same type as in SUB
           CALL SUB(list)
        END SUBROUTINE

Two corresponding constant instantiation arguments are the same if and
only if both have the same shape, same type, same type parameters, and
are equal.

Two corresponding type-spec instantiation arguments are the same if
and only if both have the same type and have the same kind and length
type parameters.

Two corresponding procedure instantiation arguments are the same if
and only if both resolve to the same specific procedure.

NOTE 2

    Example showing how procedure instantiation arguments influence
    whether instantiations are the same:

        INTERFACE
           SUBROUTINE F1(x)
              TYPE(MY_T) :: x
           END SUBROUTINE
           SUBROUTINE F2(x)
              TYPE(MY_U) :: x
           END SUBROUTINE
           SUBROUTINE F3(x)
              TYPE(MY_U) :: x
           END SUBROUTINE
        END INTERFACE

        GENERIC :: A => F1, F2
        GENERIC :: B => F1, F3

        TEMPLATE TMPL(T, F)
            DEFERRED TYPE :: T
            DEFERRED INTERFACE
               SUBROUTINE F(x)
                  TYPE(T), INTENT(INOUT) :: x
               END SUBROUTINE F
            END INTERFACE
        END TEMPLATE

        INSTANTIATE TMPL(MY_T, A) ! Resolves to F1
        INSTANTIATE TMPL(MY_T, B) ! Resolves to F1 ==> same

        INSTANTIATE TMPL(MY_U, A) ! Resolves to F2
        INSTANTIATE TMPL(MY_U, B) ! Resolves to F3 ==> different


15.6.4 Deferred argument association

15.6.4.1 Instantiation arguments

Instantiation arguments are specified by an INSTANTIATE statement, a
REQUIRE statement, or by inline instantiation.

R1528 <instantiation-arg-spec> <<is>>
          [ <keyword> = ] <instantiation-arg>

R1529 <instantiation-arg> <<is>> <constant-expr>
                          <<or>> <type-spec>
                          <<or>> <generic-spec>
                          <<or>> <procedure-name>

C1542a (R1528) The <keyword> = shall not be omitted from an
               <instantiation-arg-spec> unless it has been omitted from
               each preceding <instantiation-arg-spec> in the argument
               list.

C1542b (R1528) Each <keyword> shall be the name of a deferred argument in
               the referenced requirement or template.

The instantiation argument list identifies the correspondence between the
instantiation arguments and the deferred arguments of the referenced
template or requirement. This correspondence can be established either by
keyword or by position. If an argument keyword appears, the instantiation
argument corresponds to the deferred argument whose name is the same as
the argument keyword. In the absence of an argument keyword, an
instantiation argument corresponds to the deferred argument occupying the
corresponding position in the deferred argument list; that is, the first
instantiation argument corresponds to the first deferred argument in the
deferred argument list, the second instantiation instantiation argument
corresponds to the second deferred argument, etc. Each instantiation
argument shall correspond to a deferred argument, and exactly one
instantiation argument shall correspond to each deferred argument.

The entity that is associated with a deferred argument is called its
effective instantiation argument.

15.6.4.2 Deferred type association

C1543 (R1529) An <instantiation-arg> that corresponds to a deferred type
              shall be a <type-spec>.

C1544 (R1529) A <type-spec> shall specify constant type parameters.

C1545 (R1529) A <type-spec> shall not specify an abstract type if its
              corresponding deferred type does not have the ABSTRACT
              attribute.

{ Judging by C7109 & C7110, just saying "its corresponding deferred type"
  should be sufficient and unambiguous in context. }

C1546 (R1529) A <type-spec> shall specify an extensible derived type if
              its corresponding deferred type has the EXTENSIBLE
              attribute.

C1547 (R1529) A <type-spec> shall not specify EVENT_TYPE, LOCK_TYPE, or
              NOTIFY_TYPE, or specify a type that has a potential subobject
              component of type EVENT_TYPE, LOCK_TYPE, or NOTIFY_TYPE.

NOTE 1
      Constraint C1547 ensures that intrinsic assignment is available for
      variables of deferred type.

{A number of places in the standard have a similar exception for these
three types. A separate edit paper could perhaps introduce a name for this
category of types for which intrinsic assignment is not permitted so that
all these constraints can reference a shared term.}

C1548 (R1529) A <type-spec> shall not specify a type with a coarray
              potential subobject component.

NOTE 2
      Constraint C1548 avoids the possibility of assignment
      being invalid where the variable and expr do not agree on
      the allocation status of a coarray component.

A deferred type becomes associated with the type and type parameters
identified by its corresponding instantiation argument.

NOTE 3
      Non-abstract, extensible derived types can be associated with
      both abstract and non-extensible deferred type arguments.

NOTE 4
      Intrinsic types, SEQUENCE types, and types with the BIND attribute
      cannot be associated with deferred type arguments that have the
      EXTENSIBLE attribute.

      Simple example illustrating the above.

      TYPE :: MY_T1
      END TYPE

      TYPE, ABSTRACT :: MY_T2
      END TYPE

      TEMPLATE TMPL1(T)
         DEFERRED TYPE :: T
      END TEMPLATE TMPL

      TEMPLATE TMPL2(U)
         DEFERRED TYPE, ABSTRACT :: U
      END TEMPLATE TMPL

      INSTANTIATE TMPL1(INTEGER) ! ok
      INSTANTIATE TMPL1(MY_T1)   ! ok
      INSTANTIATE TMPL1(MY_T2)   ! invalid

      INSTANTIATE TMPL2(INTEGER) ! invalid
      INSTANTIATE TMPL2(MY_T1)   ! ok
      INSTANTIATE TMPL2(MY_T2)   ! ok

15.6.4.3 Deferred constant association

C1549 (R1529) An <instantiation-arg> that corresponds to a deferred
              constant shall be a <constant-expr>.

C1550 (R1529) The type and kind type parameters of <constant-expr> shall
              be the same as the type and kind type parameter of its
              corresponding deferred constant.

C1551 (R1529) If the shape of the corresponding deferred constant is not
              implied, then the <constant-expr> shall have the same shape.

C1552 (R1529) If the rank of the corresponding deferred constant is not
              implied, then the <constant-expr> shall have the same rank.

The value of a deferred constant becomes associated with the value of
the constant expression in the corresponding instantiation argument.

15.6.4.4 Deferred procedure association

C1553 (R1529) An <instantiation-arg> that corresponds to a deferred
              procedure shall be a <generic-spec> or a <procedure-name>.

C1554 (R1529) A <procedure-name> shall denote a nonintrinsic, nonpointer
              procedure that has an explicit interface.


{
UTI: Can <procedure-name> be a specific intrinsic? Can <generic-spec> be a
generic intrinsic? Intrinsics, other than the specific intrinsics, cannot
be passed as an actual arg to functions because of the issues with generic
resolution, but that issue is resolved for templates, so can we say that a
generic intrinsic is resolved to a specific based on the interface of the
deferred procedure? We would have to prohibit the restricted specific
intrinsic functions listed in Table 16.3, as well as an undetermiened list
of generic intrinsic functions. For example, any generic intrinsic
function with a KIND arg cannot be used as an instantation argument, since
its interface cannot be described via the mechanisms of a normal Fortran
interface.
}


{
UTI: Can a <procedure-name> be a procedure pointer? If it were,
invocations of it by the template would need to be resolved at runtime, so
it would be no different than passing the procedure pointer as an actual
argument. However, there is this odd case with generics:

procedure(my_intf), pointer :: p
interface my_generic
    procedure :: p
end interface

This is legal and creates a generic, my_generic, which has a specific
procedure that is a pointer. If an invocation of my_generic resolves to
that pointer specific, then the procedure pointed to by p is invoked. So
even if we prohibit <procedure-name> from being a procedure pointer, a
pointer could still "sneak its way in" through a generic name.

If we wanted to prohbit procedure pointers entirely, we would also need to
add that the specific procedure resolved from <generic-spec> shall not be
a pointer. However, users passing a generic procedure name might be taking
it from some external library which uses pointer specifics, and the user
will have no idea that pointers are involved, and so would be surprised by
an error for using it as an intstantiation arg.

Here is a full example of a generic procedure with pointer specifics which
works the same with gfortran, ifx, and nagfor:

    module m
        abstract interface
            integer function intf1(i)
                integer :: i
            end function
            real function intf2(r)
                real :: r
            end function
        end interface

        procedure(intf1), pointer :: p1
        procedure(intf2), pointer :: p2

        interface my_generic
            procedure :: p1
            procedure :: p2
        end interface
    contains
        integer function fn1(i)
            integer :: i
            fn1 = i + 1
        end function

        real function fn2(r)
            real :: r
            fn2 = r + 2
        end function

        integer function fn3(i)
            integer :: i
            fn3 = i + 123
        end function

        real function fn4(r)
            real :: r
            fn4 = r + 456.0
        end function
    end module

    program p
        use m
        p1 => fn1
        p2 => fn2

        print *, my_generic(5)    ! prints 6
        print *, my_generic(5.0)  ! prints 7.0

        p1 => fn3
        p2 => fn4

        print *, my_generic(5)    ! prints 128
        print *, my_generic(5.0)  ! prints 461.0

        p2 => NULL()

        print *, my_generic(5)    ! prints 128
        print *, my_generic(5.0)  ! segfault!
    end program

In current Fortran there isn't a way (that I can think of) for a generic
interface to outlive the scope of a pointer that is one of its specifics.
E.g. this is not allowed:
  procedure(my_generic), pointer :: generic_proc_ptr
If it were, then generic_proc_ptr could be saved and referenced after p1
and p2 went out of scope, and so invoking that specific from the generic
would be undefined behavior... maybe? The generic resolution process
itself wouldn't be affected, though.

For templates, a <generic-spec> instantiation arg will be resolved to a
specific at the time of instantiation, so generics won't cause any issues
more than just a pointer <procedure-name> would. And a pointer
<procedure-name> as an instantiation arg should effectively act the same
as a pointer actual arg. I'm unsure if a pointer <procedure-name>
instantiation arg would cause problems. It seems like it's fine.
}


C1555 (R1529) The procedure specified by <procedure-name> shall have the
              same characteristics as its corresponding deferred
              procedure, except that a pure procedure may correspond to a
              deferred procedure that is not pure, a simple procedure may
              correspond to a deferred procedure that is not simple, and
              an elemental procedure may correspond to a deferred
              procedure that is not elemental.

C1556 (R1529) The generic identifier specified by <generic-spec> shall
              have exactly one specific procedure that has the same
              characteristics as the corresponding deferred procedure,
              except that a pure specific procedure may correspond to a
              deferred procedure that is not pure, a simple specific
              procedure may correspond to a deferred procedure that is not
              simple, and an elemental specific procedure may correspond
              to a deferred procedure that is not elemental.

C1557 (R1529) A <procedure-name> shall not be the name of a generic
              identifier.

If a deferred procedure corresponds to a specific procedure name, it
becomes associated with that named procedure.

If a deferred procedure corresponds to a generic identifier, it becomes
associated with the specific procedure that satisfies constraint C1556.

NOTE

      If a generic identifier and one of its specific procedures have the
      same name, and that name is specified as the instantiation argument
      for a deferred procedure, the generic identifier is the
      instantiation argument.


===END===
