To: J3                                                     J3/24-163rX
From: generics
Subject: Edits for TEMPLATE construct
Date: 2024-October-29
References: 24-161, 24-162, 24-125r5, 24-126r4, 24-127r4

Introduction:
=============

This is the 3rd of 6 papers that provide edits for the approved syntax
for templates.

Note that the section numbering is merely suggestive.  The overall
ordering of template subclauses will change in future papers, and
clause 15 itself is merely a placeholder.

Section 1:
==========

* Append the following at the end of clause 15 from paper 24-162.


15.3 The TEMPLATE construct

15.3.1 Syntax for the TEMPLATE construct

{ UTI: This has been reworked since the standard meeting to be based on
  the text about modules from 14.2.1, but it probably needs more work
  still. }
A template contains declarations, specifications, and definitions that are
parameterized by deferred arguments. Public identifiers of a template are
made accessible to other scoping units by instantiation of the template
and refer to specifc instances of the entities created by the
instantiation.

R1510 <template> <<is>> <template-stmt>
                        [ <template-specification-part> ]
                        [ <template-subprogram-part> ]
                        <end-template-stmt>

C1527a (R1510) A <template> shall only appear in the <specification-part>
               of a main program or module.

R1511 <template-stmt> <<is>>
          TEMPLATE <template-name> ([<deferred-arg-list>])

R1512 <end-template-stmt> <<is>>  END TEMPLATE [<template-name>]


C1527b (R1512) If a <template-name> appears in the <end-template-stmt>,
               it shall be identical to the <template-name>
               specified in the <template-stmt>.

15.3.2 Template specification part

R1513 <template-specification-part> <<is>>
          [ <use-stmt> ] ...
          [ <import-stmt> ] ...
          [ <template-declaration-construct> ] ...

R1514 <template-declaration-construct>
          <<is>> <template-specification-construct>
          <<or>> <deferred-arg-decl-stmt>
          <<or>> <requirement>
          <<or>> <template>

R1515 <template-specification-construct>
          <<is>> <access-stmt>
          <<or>> <derived-type-def>
          <<or>> <enum-def>
          <<or>> <enumeration-type-def>
          <<or>> <generic-stmt>
          <<or>> <instantiate-stmt>
          <<or>> <interface-block>
          <<or>> <intrinsic-stmt>
          <<or>> <type-declaration-stmt>

C1528 (R1515) If <type-declaration-stmt> is specified, PARAMETER shall
              appear as an <attr-spec>.

{ The implicit mapping within a template scoping unit is the null mapping
  for all the letters - specified in the "misc edits" paper via a change
  to "8.7 Implicit statement". }

NOTE

    A template specification section cannot declare variables or procedure
    pointers.

15.3.3 Template subprogram part

R1516 <template-subprogram-part> <<is>> <contains-stmt>
                                        [ <template-subprogram> ] ...

R1517 <template-subprogram>
          <<is>> <function-subprogram>
          <<or>> <subroutine-subprogram>
          <<or>> <templated-function-subprogram>
          <<or>> <templated-subroutine-subprogram>

15.4 Templated procedures

A templated procedure is a template that defines a single
procedure which is accessible via instantiation.

{ Templated procedures are added to <internal-subprogram> and
  <module-subprogram> by the "misc edits" paper, and so can appear
  anywhere a normal procedure definition can appear. }

R1518 <templated-function-subprogram> <<is>>
          <templated-function-stmt>
          <templated-subprogram-specification-part>
          [<execution-part>]
          [<internal-subprogram-part>]
          <end-function-stmt>

C1529 (R1518) If a <function-name> appears in the <end-function-stmt>,
              it shall be identical to the <template-name>
              specified in the <templated-function-stmt>.

R1519 <templated-subroutine-subprogram> <<is>>
          <templated-subroutine-stmt>
          <templated-subprogram-specification-part>
          [<execution-part>]
          [<internal-subprogram-part>]
          <end-subroutine-stmt>

C1530 (R1519) If a <subroutine-name> appears in the <end-subroutine-stmt>,
              it shall be identical to the <template-name>
              specified in the <templated-subroutine-stmt>.

C1531 An internal templated procedure shall not contain an
      <internal-subprogram-part>.

C1532 The <internal-subprogram-part> of a templated procedure shall not
      contain a <templated-function-subprogram> or
      <templated-subroutine-subprogram>.

{ UTI: Consider TEMPLATE keyword prefix }
R1522 <templated-function-stmt> <<is>>
          [ <prefix> ] FUNCTION <template-name>
          ( <deferred-arg-list> ) ([<dummy-arg-list>])
          [<suffix>]

R1523 <templated-subroutine-stmt> <<is>>
         [ <prefix> ] SUBROUTINE <template-name>
         ( <deferred-arg-list> ) ([<dummy-arg-list>])
         [<proc-language-binding-spec>]

R1520 <templated-subprogram-specification-part> <<is>>
          [ <use-stmt> ] ...
          [ <import-stmt> ] ...
          [ <templated-subprogram-declaration-construct> ] ...

R1521 <templated-subprogram-declaration-construct>
          <<is>> <deferred-arg-decl-stmt>
          <<or>> <format-stmt>
          <<or>> <specification-construct>

15.5 Restrictions on template definitions

C1533 A variable or procedure pointer declared anywhere within a template
      or templated subprogram shall not have the SAVE attribute.

C1534 An <equivalence-stmt> or <common-stmt> shall not appear anywhere
      within a template or templated subprogram.

C1535 A procedure referenced anywhere within a template or templated
      subprogram shall have an explicit interface.

NOTE

    Constraint C1535 expresses the notion of type-safety.  In particular,
    this allows a template implementation to be verified to be internally
    consistent.

===END===
